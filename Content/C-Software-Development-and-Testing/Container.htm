<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title></title>
        <link href="../Resources/Stylesheets/Styles.css" rel="stylesheet" />
    </head>
    <body>
        <h1 id="container">Container</h1>
        <p>
            <img src="../Resources/Images/dev-container.png" title="Container icon" alt="A container sketch" />
        </p>
        <p class="p-left-border">In everyday use, a container is a receptacle used to hold or transport items. In IT, a <MadCap:keyword term="container" />‘container’ is a standalone package of software that includes everything needed to run it: code, runtime, system tools, system libraries, and settings.</p>
        <p>When working with containers, it’s important to understand the following :</p>
        <ul>
            <li>Containers are executable units of software,</li>
            <li>They package application code along with its libraries and dependencies,</li>
            <li>They can run anywhere — desktop, traditional IT, or the cloud,</li>
            <li>Containers take advantage of a form of operating system (OS) virtualization,</li>
            <li>They are small, fast, and portable because they do not need to include a guest OS in every instance.</li>
        </ul>
        <p>Containers serve the five main purposses:</p>
        <ol>
            <li><b>Packaging Applications</b>: Containers package application code along with its libraries and dependencies. This allows the code to be run anywhere, whether it be on desktop, traditional IT, or the cloud.</li>
            <li><b>Isolating Processes</b>: Containers take advantage of a form of operating system (OS) virtualization to isolate processes. They control the amount of CPU, memory, and disk that those processes can access.</li>
            <li><b>Providing Portability</b>: Containers are small, fast, and portable. Unlike a virtual machine, containers do not need to include a guest OS in every instance and can instead simply leverage the features and resources of the host OS.</li>
            <li><b>Supporting Modern Development and Architecture</b>: Containers are an ideal fit for modern development and application patterns. They support regular code deployments in small increments due to their deployment portability/consistency across platforms and their small size.</li>
            <li><b>Managing Tasks</b>: A Task in a container encapsulates a Process. The Task’s Process is the first/primary command in the container. When the Process exits, the Task state is exited.</li>
        </ol>
        <h2>Containers limitations</h2>
        <p>While containers offer an efficient way to bundle and run applications, they have limitations. They can face performance issues due to the overhead of running multiple OS instances, and security can be a concern if a malicious application breaks out of its container.</p>
        <h2 id="container-livespan">Container Livespan</h2>
        <p>The lifespan of a terminal in IT is not measured by the runtime necessary for software execution. Instead, it’s a tool that remains functional as long as it’s properly maintained. The lifespan of a terminal session can vary, from a few seconds to several hours or even days, depending on the processes it runs. The terminal application itself, providing text-based access to the operating system, has an indefinite lifespan as long as the operating system is running and the application is functioning correctly.</p>
        <h3 id="the-tech-factor">The Tech Factor</h3>
        <p>This term tech factor rating is <strong>8/10</strong> where <span class="bold">8</span> means
advanced term, that may be difficult for the average user to understand.</p>
    </body>
</html>